# my method, 77ms cost, bad cost, beats only 5% people in python

# Definition for singly-linked list.
class ListNode(object):
    def __init__(self, x):
        self.val = x
        self.next = None

class Solution(object):
    def mergeTwoLists(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        s = []
        
        cur = l1
        while(True):
            if cur == None:
                break
            s.append(cur.val)
            if cur.next == None:
                break
            cur = cur.next
        
        
        cur = l2
        while(True):
            if cur == None:
                break
            s.append(cur.val)
            if cur.next == None:
                break
            cur = cur.next
        
        l = len(s)
        if l == 0:
            return s
        
        for i in range(l):
            flag = True
            for j in range(1, l - i):
                if s[j] < s[j-1]:
                    s[j], s[j-1] = s[j-1], s[j]
                    flag = False
            if flag:
                return s
        return s
        
 # other method, 45ms cost, beats 95%, iterativly
 class Solution(object):
    def mergeTwoLists(self, l1, l2):
        dummy = cur = ListNode(0)
        while l1 and l2:
            if l1.val < l2.val:
                cur.next = l1
                l1 = l1.next
            else:
                cur.next = l2
                l2 = l2.next
            cur = cur.next
        cur.next = l1 or l2
        return dummy.next
        
 # other method, 48ms cost, beats 85%, recursively
 class Solution(object):
    def mergeTwoLists(self, l1, l2):
        if not l1 or not l2:
            return l1 or l2
        if l1.val < l2.val:
            l1.next = self.mergeTwoLists(l1.next, l2)
            return l1
        else:
            l2.next = self.mergeTwoLists(l1, l2.next)
            return l2
          
# other method, 47ms cost, beats 92%, in-place iteratively
class Solution(object):
    def mergeTwoLists(self, l1, l2):
        if None in (l1, l2):
            return l1 or l2
        dummy = cur = ListNode(0)
        dummy.next = l1
        while l1 and l2:
            if l1.val < l2.val:
                l1 = l1.next
            else:
                nxt = cur.next
                cur.next = l2
                tmp = l2.next
                l2.next = nxt
                l2 = tmp
            cur = cur.next
        cur.next = l1 or l2
        return dummy.next
