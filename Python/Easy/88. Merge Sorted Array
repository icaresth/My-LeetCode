
# my method, 59ms cost, 12% beat, bad

class Solution(object):
    def merge(self, nums1, m, nums2, n):
        """
        :type nums1: List[int]
        :type m: int
        :type nums2: List[int]
        :type n: int
        :rtype: void Do not return anything, modify nums1 in-place instead.
        """
        
        l1 = len(nums1)
        l2 = len(nums2)

        for i in range(l1 - m):
            nums1.remove(nums1[-1])
            
        # for i in range(l2 - n):
        #     nums2.remove(nums2[-1])

        for i in range(n):
            nums1.append(nums2[i])

        x = len(nums1)

   
        for i in range(x):
            for j in range(i + 1, x):
                if nums1[i] > nums1[j]:
                    nums1[i], nums1[j] = nums1[j], nums1[i]
                    flag = True
                    
# other method    
class Solution(object):
    def merge(self, nums1, m, nums2, n):
        """
        :type nums1: List[int]
        :type m: int
        :type nums2: List[int]
        :type n: int
        :rtype: void Do not return anything, modify nums1 in-place instead.
        """
        
        nums1[m:] = nums2[:n]
        nums1.sort()
        
# other method
class Solution(object):
    def merge(self, nums1, m, nums2, n):
        """
        :type nums1: List[int]
        :type m: int
        :type nums2: List[int]
        :type n: int
        :rtype: void Do not return anything, modify nums1 in-place instead.
        """
        
        while m > 0 and n > 0:
            if nums1[m-1] >= nums2[n-1]:
                nums1[m+n-1] = nums1[m-1]
                m -= 1
            else:
                nums1[m+n-1] = nums2[n-1]
                n -= 1
        if n > 0:
            nums1[:n] = nums2[:n]
