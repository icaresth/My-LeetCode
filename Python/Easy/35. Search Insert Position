# my method, 34 ms cost, 91% beat
class Solution(object):
    def searchInsert(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        l = len(nums)
        if target <= nums[0]:
            return 0
        if target > nums[l-1]:
            return l
        
        i = 0
        while(True):
            if nums[i] < target and target <= nums[i+1]:
                return i + 1
            else:
                i = i + 1
                
# other method
class Solution(object):
    def searchInsert(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        low = 0
        high = len(nums) - 1
        while low <= high:
            mid = (low + high) / 2
            if nums[mid] == target:
                return mid
            elif nums[mid] < target:
                low = mid + 1
            else:
                high = mid - 1
        return low
