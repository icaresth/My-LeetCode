# my method, 49ms cost, pass the test but bad, use stack
class Solution(object):
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
        l = len(s)
        
        e = ''
        for i in range(l):
            if s[i] == '(' or s[i] == ')' or s[i] == '[' or s[i] == ']' or s[i] == '{' or s[i] == '}':
                e += s[i]
        
        le = len(e)
        
        if le % 2 == 1:
            return False
        if e[0] == ')' or e[0] == ']' or e[0] == '}':
            return False
        
        t = []
        d = -1
        
        for i in range(le):
            if e[i] == '(' or e[i] == '[' or e[i] == '{':
                t.append(e[i])
                d = d + 1
            if e[i] == ')':
                if t[d] == '(':
                    t.pop()
                    d = d - 1
                else:
                    t.append(e[i])
                    d = d + 1
            if e[i] == ']':
                if t[d] == '[':
                    t.pop()
                    d = d - 1
                else:
                    t.append(e[i])
                    d = d + 1
            if e[i] == '}':
                if t[d] == '{':
                    t.pop()
                    d = d - 1
                else:
                    t.append(e[i])
                    d = d + 1
                    
        if d == -1:
            return True
        else:
            return False
            
# other method use stack, 43ms cost, looks better than mine
stack = []
        dict = {"]":"[", "}":"{", ")":"("}
        for char in s:
            if char in dict.values():
                stack.append(char)
            elif char in dict.keys():
                if stack == [] or dict[char] != stack.pop():
                    return False
            else:
                return False
        return stack == []
